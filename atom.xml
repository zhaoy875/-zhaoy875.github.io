<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhaoy</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhaoy875.github.io/"/>
  <updated>2016-09-08T14:17:48.029Z</updated>
  <id>http://zhaoy875.github.io/</id>
  
  <author>
    <name>zhaoy875</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://zhaoy875.github.io/2016/09/07/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://zhaoy875.github.io/2016/09/07/git常用命令/</id>
    <published>2016-09-07T07:16:43.000Z</published>
    <updated>2016-09-08T14:17:48.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git示意图"><a href="#git示意图" class="headerlink" title="git示意图"></a>git示意图</h2><p><img src="http://od6ri688q.bkt.clouddn.com/git_articlex.png" alt="图解git"><br><a id="more"></a></p>
<p>git常用命令行</p>
<p><img src="http://od6ri688q.bkt.clouddn.com/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.jpg" alt="git命令"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;git示意图&quot;&gt;&lt;a href=&quot;#git示意图&quot; class=&quot;headerlink&quot; title=&quot;git示意图&quot;&gt;&lt;/a&gt;git示意图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://od6ri688q.bkt.clouddn.com/git_articlex.png&quot; alt=&quot;图解git&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入hexo主题</title>
    <link href="http://zhaoy875.github.io/2016/09/06/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3hexo%E4%B8%BB%E9%A2%98/"/>
    <id>http://zhaoy875.github.io/2016/09/06/深入了解hexo主题/</id>
    <published>2016-09-06T15:26:24.000Z</published>
    <updated>2016-09-08T15:58:12.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入hexo主题"><a href="#深入hexo主题" class="headerlink" title="深入hexo主题"></a>深入hexo主题</h1><h2 id="准备自制hexo主题"><a href="#准备自制hexo主题" class="headerlink" title="准备自制hexo主题"></a>准备自制hexo主题</h2><p>  所需相关技术：<br>   默认你已经掌握了解基本的html5 css3 javascript</p>
<ul>
<li>你还需要了解一些JS模板引擎（ejs ,jade,swig等）</li>
<li>css预编译语言如less/sass styl样式模板</li>
<li>基于nodejs的前端自动化gulp、webpack，bowel等构建工具的使用</li>
<li>模块化开发的思想<a id="more"></a>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深入hexo主题&quot;&gt;&lt;a href=&quot;#深入hexo主题&quot; class=&quot;headerlink&quot; title=&quot;深入hexo主题&quot;&gt;&lt;/a&gt;深入hexo主题&lt;/h1&gt;&lt;h2 id=&quot;准备自制hexo主题&quot;&gt;&lt;a href=&quot;#准备自制hexo主题&quot; class=&quot;headerlink&quot; title=&quot;准备自制hexo主题&quot;&gt;&lt;/a&gt;准备自制hexo主题&lt;/h2&gt;&lt;p&gt;  所需相关技术：&lt;br&gt;   默认你已经掌握了解基本的html5 css3 javascript&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你还需要了解一些JS模板引擎（ejs ,jade,swig等）&lt;/li&gt;
&lt;li&gt;css预编译语言如less/sass styl样式模板&lt;/li&gt;
&lt;li&gt;基于nodejs的前端自动化gulp、webpack，bowel等构建工具的使用&lt;/li&gt;
&lt;li&gt;模块化开发的思想
    
    </summary>
    
    
      <category term="javascript" scheme="http://zhaoy875.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>站点收藏</title>
    <link href="http://zhaoy875.github.io/2016/09/06/%E6%94%B6%E8%97%8F%E7%BD%91%E5%9D%80/"/>
    <id>http://zhaoy875.github.io/2016/09/06/收藏网址/</id>
    <published>2016-09-06T14:16:12.000Z</published>
    <updated>2016-09-08T15:58:26.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人站点收藏夹"><a href="#个人站点收藏夹" class="headerlink" title="个人站点收藏夹"></a>个人站点收藏夹</h1><!-- 我的前端学习工作 -->
<h2 id="每日必逛系列"><a href="#每日必逛系列" class="headerlink" title="每日必逛系列"></a>每日必逛系列</h2><ul>
<li><a href="http://gold.xitu.io" target="_blank" rel="external">掘金</a></li>
<li><a href="https://github.com/zhaoy875" target="_blank" rel="external">github</a></li>
<li><a href="https://segmentfault.com" target="_blank" rel="external">segmentfault</a></li>
<li><a href="weibo.com/123zhaoy">微博</a></li>
<li><a href="http://www.jianshu.com" target="_blank" rel="external">简书</a></li>
<li>cnblogs </li>
<li>知乎</li>
<li>v2ex</li>
</ul>
<a id="more"></a>
<h2 id="前端站点"><a href="#前端站点" class="headerlink" title="前端站点"></a>前端站点</h2><h2 id="我的工作流"><a href="#我的工作流" class="headerlink" title="我的工作流"></a>我的工作流</h2><blockquote>
<p>信息爆炸的年代，靠死记硬背知识注定被淘汰，我们需要的是一种高效的学习方式，自主的能习的能力。<br>借助工具：搜索引擎是最好的老师，如果你能在搜索引擎上找到答案的问题通常都不是很难的大问题，学会搜索，学会与人交流沟通，学会怎么问问题很重要，毕竟很多人真的不会问问题！ </p>
</blockquote>
<h3 id="学习记录工具"><a href="#学习记录工具" class="headerlink" title="学习记录工具"></a>学习记录工具</h3><h4 id="知识管理工具-如为知笔记-印象笔记-有道笔记等"><a href="#知识管理工具-如为知笔记-印象笔记-有道笔记等" class="headerlink" title="知识管理工具 如为知笔记 印象笔记 有道笔记等"></a>知识管理工具 如为知笔记 印象笔记 有道笔记等</h4><p> 好记性不如烂笔头，一个分类合理有体系的知识管理软件能让自己效率大大提高。<br>习惯了各种分散零碎的学习模式，难免会忘记，记录，合理分门别类管理会大大帮助自己整理归纳知识库，等等，，，还有其他各种好处呀等你用过后就知道了</p>
<h4 id="学习技术的教程网站"><a href="#学习技术的教程网站" class="headerlink" title="学习技术的教程网站"></a>学习技术的教程网站</h4><p>  这个就需要收藏和斟酌了，一个优秀的站点总会吸引优秀的来访者，或者因为高质量的内容或非凡的体验设计或是强大的功能等等总有它出众的地方，而你需要自己斟酌去筛选，下面是我自己学习前端过程中常逛的站点：</p>
<p> 精品总是不多见的：<br>下面是我收藏的一些 前端博客、教程、前端技术、学习分享的站点：</p>
<h2 id="前端技能"><a href="#前端技能" class="headerlink" title="前端技能"></a>前端技能</h2><p>  html(5) 、css(3 and 4?) 、javascript(es6 and more?)<br> <strong> 这三大基础，前几年nodejs横空出世，前端变得无限可能 </strong></p>
<p> 。。。各种新的框架技术雨后春笋般的冒出来，<br> 前端，后端（nodejs server），桌面端(nw.js electron等)，移动端（angular，react native,vue）,重量级的前端自动化工程化（grunt,yo?,webpack,gulp等等）  如何去分辨糟粕与精华，不盲目跟风，学一样东西之前一定要明白他是干什么的，解决了什么问题？应用场景，对工作效率的影响，，，等等</p>
<h3 id="分享下我的前端导航页"><a href="#分享下我的前端导航页" class="headerlink" title="分享下我的前端导航页"></a>分享下我的前端导航页</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今晚累了明天接着写，先睡了。。。<br>2016-9-4 04:19:43</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;个人站点收藏夹&quot;&gt;&lt;a href=&quot;#个人站点收藏夹&quot; class=&quot;headerlink&quot; title=&quot;个人站点收藏夹&quot;&gt;&lt;/a&gt;个人站点收藏夹&lt;/h1&gt;&lt;!-- 我的前端学习工作 --&gt;
&lt;h2 id=&quot;每日必逛系列&quot;&gt;&lt;a href=&quot;#每日必逛系列&quot; class=&quot;headerlink&quot; title=&quot;每日必逛系列&quot;&gt;&lt;/a&gt;每日必逛系列&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gold.xitu.io&quot;&gt;掘金&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zhaoy875&quot;&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com&quot;&gt;segmentfault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;weibo.com/123zhaoy&quot;&gt;微博&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com&quot;&gt;简书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cnblogs &lt;/li&gt;
&lt;li&gt;知乎&lt;/li&gt;
&lt;li&gt;v2ex&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="博客" scheme="http://zhaoy875.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="网站收藏" scheme="http://zhaoy875.github.io/tags/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"/>
    
      <category term="前端学习" scheme="http://zhaoy875.github.io/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>使用SSH免密简化Hexo deploy部署</title>
    <link href="http://zhaoy875.github.io/2016/09/05/hexo-deploy-blog-use-ssh-link/"/>
    <id>http://zhaoy875.github.io/2016/09/05/hexo-deploy-blog-use-ssh-link/</id>
    <published>2016-09-05T06:40:16.000Z</published>
    <updated>2016-09-08T15:58:19.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>hexo 使用自带的hexo-deploy-git插件实现自动部署到远程remote时，repository仓库链接使用ssh要比使用https快，也可以避免每次都要登录输入密码的步骤</p>
<a id="more"></a>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="修改站点配置-config-yml文件里面的deploy配置"><a href="#修改站点配置-config-yml文件里面的deploy配置" class="headerlink" title="修改站点配置 _config.yml文件里面的deploy配置"></a>修改站点配置 _config.yml文件里面的deploy配置</h2><pre><code>deploy:
  type: git
  repository: git@github.com:zhaoy875/zhaoy875.github.io.git  
</code></pre><h2 id="列出已存在的SSH-Key"><a href="#列出已存在的SSH-Key" class="headerlink" title="列出已存在的SSH Key"></a>列出已存在的SSH Key</h2><p>打开Git Bash，并且输入：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ls</span> -<span class="keyword">al</span> ~/.ssh</div></pre></td></tr></table></figure></p>
<p>这个命令会列出你<code>.ssh</code>账户中已经存在的SSH key，如果之前没有设置过，一般都是没有。那么就需要下面的生成密钥的步骤</p>
<h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><p>然后输入：<br><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code><br>这个命令将会生成一个以你邮箱为标签的ssh key，然后bash中会显示：</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa <span class="keyword">key</span> pair.</div><div class="line">Enter file <span class="keyword">in</span> which <span class="keyword">to</span> save the <span class="keyword">key</span> (/c/Users/you/.ssh/id_rsa): [Press enter]</div></pre></td></tr></table></figure>
<p>回车，保存密钥文件到本地<br>复制密钥粘贴到远程仓库，这里以github为例，粘贴到github ssh key</p>
<p>这样，你本地git bash就有了一个可用的SSH key。</p>
<h2 id="将SSH-Key添加到Github中"><a href="#将SSH-Key添加到Github中" class="headerlink" title="将SSH Key添加到Github中"></a>将SSH Key添加到Github中</h2><p>下面将这个key添加到github网站。<br>打开<a href="https://github.com/settings/ssh" target="_blank" rel="external">https://github.com/settings/ssh</a>，点击<code>Add SSH Key</code>，复制<code>id_rsa.pub</code>中的所有内容到<code>Key</code>框中，在<code>Title</code>框中输入方便自己记忆的名字（建议输入能让自己明白是哪台电脑的名字，方便以后管理）。<br>当网页显示添加成功后，就已经完成了全部的操作。<br>下面进行一些测试，同样是打开Git Bash，输入：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure></p>
<p>bash中会显示如下字样：</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity <span class="keyword">of</span> host <span class="comment">'github.com (207.97.227.239)' can't be established.</span></div><div class="line">RSA <span class="keyword">key</span> fingerprint <span class="keyword">is</span> <span class="number">16</span>:<span class="number">27</span>:ac:a5:<span class="number">76</span>:<span class="number">28</span>:<span class="number">2</span>d:<span class="number">36</span>:<span class="number">63</span>:<span class="number">1</span>b:<span class="number">56</span>:<span class="number">4</span>d:eb:df:a6:<span class="number">48.</span></div><div class="line">Are you sure you want <span class="keyword">to</span> <span class="keyword">continue</span> connecting (yes/no)?</div></pre></td></tr></table></figure>
<p>输入yes之后，计算机会自动将<code>github.com</code>列入已知的host，然后会出现如下提示：</p>
<figure class="highlight irpf90"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hi username<span class="comment">! You've successfully authenticated, but GitHub does not</span></div><div class="line"><span class="keyword">provide</span> shell <span class="keyword">access</span>.</div></pre></td></tr></table></figure>
<p>over!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;hexo 使用自带的hexo-deploy-git插件实现自动部署到远程remote时，repository仓库链接使用ssh要比使用https快，也可以避免每次都要登录输入密码的步骤&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="http://zhaoy875.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://zhaoy875.github.io/tags/Hexo/"/>
    
      <category term="Github-Pages" scheme="http://zhaoy875.github.io/tags/Github-Pages/"/>
    
      <category term="Blog" scheme="http://zhaoy875.github.io/tags/Blog/"/>
    
      <category term="SSH" scheme="http://zhaoy875.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>console你不知道的一些高级用法</title>
    <link href="http://zhaoy875.github.io/2015/09/06/console%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/"/>
    <id>http://zhaoy875.github.io/2015/09/06/console高级用法/</id>
    <published>2015-09-06T15:06:24.000Z</published>
    <updated>2016-09-08T16:03:25.892Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>没有特殊声明下，基本都是以chrome为例</p>
<h2 id="概述console"><a href="#概述console" class="headerlink" title="概述console"></a>概述console</h2><p>大家平常写console最多的就是用来打印信息，console.log(obj or str)，<br>但console能干的事可比这多了，比如console可以自定义打印字符的css样式，<br>console.trace()踪函数的调用轨迹，<br>计时功能console.time()；性能分析console.profile等。。。<br><a id="more"></a><br><strong>让我们来console.log(console)看看</strong><br><img src="http://od6ri688q.bkt.clouddn.com/consoleQQ%E6%88%AA%E5%9B%BE20160908200956.png" alt=""></p>
<h2 id="console打印类型"><a href="#console打印类型" class="headerlink" title="console打印类型"></a>console打印类型</h2><pre><code>console.log(&quot;str or obj&quot;)
console.info(&quot;这是info&quot;);
console.debug(&quot;这是debug&quot;);
console.warn(&quot;这是warn&quot;);
console.error(&quot;这是error&quot;);
</code></pre><h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><p>console对象的上面5种方法，都可以使用printf风格的占位符。不过，占位符的种类比较少，只支持字符（%s）、整数（%d或%i）、浮点数（%f）和对象（%o）四种。</p>
<pre><code>console.log(&quot;%d年%d月%d日&quot;,2011,3,26);
console.log(&quot;圆周率是%f&quot;,3.1415926);
console.warn(&quot;圆周率是%f&quot;,3.1415926);
</code></pre><h3 id="分组group"><a href="#分组group" class="headerlink" title="分组group"></a>分组group</h3><pre><code>console.group(&quot;第一组信息&quot;);
console.log(&quot; 第一条&quot;);
console.log(&quot; 第二条&quot;);
console.log(&quot; 第三条&quot;);
console.log(&quot; 第四条&quot;);
console.groupEnd();
console.group(&quot;第2组信息&quot;);
console.log(&quot; 第1条&quot;);
console.log(&quot; 第2条&quot;);
console.log(&quot; 第3条&quot;);
console.groupEnd();
</code></pre><p><img src="http://od6ri688q.bkt.clouddn.com/console.groupQQ%E6%88%AA%E5%9B%BE20160908205931.png" alt="console.group"></p>
<h3 id="console-dir"><a href="#console-dir" class="headerlink" title="console.dir()"></a>console.dir()</h3><p>console.dir()可以显示一个对象所有的属性和方法</p>
<pre><code>console.dir(obj);
</code></pre><h3 id="console-dirxml-用来显示网页的某个节点（node）所包含的节点html-xml代码。"><a href="#console-dirxml-用来显示网页的某个节点（node）所包含的节点html-xml代码。" class="headerlink" title="console.dirxml()用来显示网页的某个节点（node）所包含的节点html/xml代码。"></a>console.dirxml()用来显示网页的某个节点（node）所包含的节点html/xml代码。</h3><pre><code>var div= document.getElementById(&quot;foot&quot;);
console.dirxml(div);
</code></pre><h3 id="console-asset"><a href="#console-asset" class="headerlink" title="console.asset()"></a>console.asset()</h3><p>  console.assert()用来判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条相应信息，并且抛出一个异常。<br>比如，下面两个判断的结果都为否。</p>
<pre><code>var result = 0;
console.assert( result );    
var year = 2000;
console.assert(year == 2011 );
</code></pre><h3 id="console-trace"><a href="#console-trace" class="headerlink" title="console.trace()"></a>console.trace()</h3><p>用来追踪函数的调用轨迹。</p>
<p>比如，有一个加法器函数。    　</p>
<pre><code>function add(a,b){
    return a+b;
}
</code></pre><p>想知道这个函数是如何被调用的，在其中加入console.trace()方法就可以了</p>
<pre><code>function add(a,b){
　　console.trace();
　　return a+b;
}

var x = add3(1,1);
　　function add3(a,b){return add2(a,b);}
　　function add2(a,b){return add1(a,b);}
　　function add1(a,b){return add(a,b);}
</code></pre><h3 id="计时功能"><a href="#计时功能" class="headerlink" title="计时功能"></a>计时功能</h3><p>console.time()和console.timeEnd()，用来显示之间代码的运行时间</p>
<pre><code>console.time(&quot;计时器一&quot;);
    var k=0; //内部循环体k次数
　　for(var i=0;i&lt;1000;i++){
　　　　for(var j=0;j&lt;1000;j++){
            k++;
        }
　　}
console.log(k)
console.timeEnd(&quot;计时器一&quot;);
</code></pre><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>性能分析（Profiler）就是分析程序各个部分的运行时间，找出瓶颈所在，使用的方法是console.profile()。</p>
<p>假定有一个函数Foo()，里面调用了另外两个函数funcA()和funcB()，其中funcA()调用10次，funcB()调用1次。</p>
<pre><code>function Foo() {　　　　
    for (var i = 0; i &lt; 10; i++) {
        funcA(1000);
    }　　　　
    funcB(10000);　　
}　　
function funcA(count) {　　　　
    for (var i = 0; i &lt; count; i++) {}　　
}　　
function funcB(count) {　　　　
    for (var i = 0; i &lt; count; i++) {}　　
}
//然后就可以分析Foo()的运行性能了。

console.profile(&apos;性能分析器一&apos;);
Foo();
console.profileEnd();
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;没有特殊声明下，基本都是以chrome为例&lt;/p&gt;
&lt;h2 id=&quot;概述console&quot;&gt;&lt;a href=&quot;#概述console&quot; class=&quot;headerlink&quot; title=&quot;概述console&quot;&gt;&lt;/a&gt;概述console&lt;/h2&gt;&lt;p&gt;大家平常写console最多的就是用来打印信息，console.log(obj or str)，&lt;br&gt;但console能干的事可比这多了，比如console可以自定义打印字符的css样式，&lt;br&gt;console.trace()踪函数的调用轨迹，&lt;br&gt;计时功能console.time()；性能分析console.profile等。。。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://zhaoy875.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
